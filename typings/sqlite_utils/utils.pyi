"""
This type stub file was generated by pyright.
"""

import contextlib
import csv
import enum
from typing import BinaryIO, Iterable, Optional, Tuple, Type

SPATIALITE_PATHS = ...
def suggest_column_types(records): # -> dict[Unknown, Unknown]:
    ...

def types_for_column_types(all_column_types): # -> dict[Unknown, Unknown]:
    ...

def column_affinity(column_type): # -> Type[str] | Type[int] | Type[bytes] | Type[float]:
    ...

def decode_base64_values(doc): # -> dict[Unknown, Unknown]:
    ...

def find_spatialite(): # -> str | None:
    ...

class UpdateWrapper:
    def __init__(self, wrapped, update) -> None:
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    


@contextlib.contextmanager
def file_progress(file, silent=..., **kwargs): # -> Generator[Unknown | UpdateWrapper, None, None]:
    ...

class Format(enum.Enum):
    CSV = ...
    TSV = ...
    JSON = ...
    NL = ...


class RowsFromFileError(Exception):
    ...


class RowsFromFileBadJSON(RowsFromFileError):
    ...


def rows_from_file(fp: BinaryIO, format: Optional[Format] = ..., dialect: Optional[Type[csv.Dialect]] = ..., encoding: Optional[str] = ...) -> Tuple[Iterable[dict], Format]:
    ...

class TypeTracker:
    def __init__(self) -> None:
        ...
    
    def wrap(self, iterator): # -> Generator[Unknown, None, None]:
        ...
    
    @property
    def types(self): # -> dict[Unknown, Unknown]:
        ...
    


class ValueTracker:
    def __init__(self) -> None:
        ...
    
    @classmethod
    def get_tests(cls): # -> list[str]:
        ...
    
    def test_integer(self, value): # -> bool:
        ...
    
    def test_float(self, value): # -> bool:
        ...
    
    def __repr__(self): # -> str:
        ...
    
    @property
    def guessed_type(self): # -> str:
        ...
    
    def evaluate(self, value): # -> None:
        ...
    


class NullProgressBar:
    def __init__(self, *args) -> None:
        ...
    
    def __iter__(self): # -> Generator[Unknown, None, None]:
        ...
    
    def update(self, value): # -> None:
        ...
    


@contextlib.contextmanager
def progressbar(*args, **kwargs): # -> Generator[NullProgressBar | ProgressBar[Unknown], None, None]:
    ...

