"""
This type stub file was generated by pyright.
"""

class Base400(Exception):
    status = ...


class NotFound(Base400):
    status = ...


class Forbidden(Base400):
    status = ...


class BadRequest(Base400):
    status = ...


SAMESITE_VALUES = ...
class Request:
    def __init__(self, scope, receive) -> None:
        ...
    
    @property
    def method(self):
        ...
    
    @property
    def url(self): # -> str:
        ...
    
    @property
    def url_vars(self): # -> Any | dict[Any, Any]:
        ...
    
    @property
    def scheme(self): # -> Literal['http']:
        ...
    
    @property
    def headers(self): # -> dict[Unknown | Any, Unknown | Any]:
        ...
    
    @property
    def host(self): # -> Any | Literal['localhost']:
        ...
    
    @property
    def cookies(self): # -> dict[str, str]:
        ...
    
    @property
    def path(self): # -> str:
        ...
    
    @property
    def query_string(self): # -> str:
        ...
    
    @property
    def full_path(self): # -> str:
        ...
    
    @property
    def args(self): # -> MultiParams:
        ...
    
    @property
    def actor(self):
        ...
    
    async def post_body(self): # -> Literal[b'']:
        ...
    
    async def post_vars(self): # -> dict[str, str]:
        ...
    
    @classmethod
    def fake(cls, path_with_query_string, method=..., scheme=...): # -> Request:
        """Useful for constructing Request objects for tests"""
        ...
    


class AsgiLifespan:
    def __init__(self, app, on_startup=..., on_shutdown=...) -> None:
        ...
    
    async def __call__(self, scope, receive, send): # -> None:
        ...
    


class AsgiStream:
    def __init__(self, stream_fn, status=..., headers=..., content_type=...) -> None:
        ...
    
    async def asgi_send(self, send): # -> None:
        ...
    


class AsgiWriter:
    def __init__(self, send) -> None:
        ...
    
    async def write(self, chunk): # -> None:
        ...
    


async def asgi_send_json(send, info, status=..., headers=...): # -> None:
    ...

async def asgi_send_html(send, html, status=..., headers=...): # -> None:
    ...

async def asgi_send_redirect(send, location, status=...): # -> None:
    ...

async def asgi_send(send, content, status, headers=..., content_type=...): # -> None:
    ...

async def asgi_start(send, status, headers=..., content_type=...): # -> None:
    ...

async def asgi_send_file(send, filepath, filename=..., content_type=..., chunk_size=..., headers=...): # -> None:
    ...

def asgi_static(root_path, chunk_size=..., headers=..., content_type=...): # -> (request: Unknown, send: Unknown) -> Coroutine[Any, Any, None]:
    ...

class Response:
    def __init__(self, body=..., status=..., headers=..., content_type=...) -> None:
        ...
    
    async def asgi_send(self, send): # -> None:
        ...
    
    def set_cookie(self, key, value=..., max_age=..., expires=..., path=..., domain=..., secure=..., httponly=..., samesite=...): # -> None:
        ...
    
    @classmethod
    def html(cls, body, status=..., headers=...): # -> Response:
        ...
    
    @classmethod
    def text(cls, body, status=..., headers=...): # -> Response:
        ...
    
    @classmethod
    def json(cls, body, status=..., headers=..., default=...): # -> Response:
        ...
    
    @classmethod
    def redirect(cls, path, status=..., headers=...): # -> Response:
        ...
    


class AsgiFileDownload:
    def __init__(self, filepath, filename=..., content_type=..., headers=...) -> None:
        ...
    
    async def asgi_send(self, send): # -> None:
        ...
    


