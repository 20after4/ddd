"""
This type stub file was generated by pyright.
"""

from sqlite3 import Connection, Row
from typing import Iterator, List, Optional, Sequence
from uuid import UUID

connections = ...
AttachedDatabase = ...
class Database:
    conn:Connection

    def __init__(self, ds, path=..., is_mutable=..., is_memory=..., memory_name=...) -> None:
        ...

    @property
    def cached_table_counts(self): # -> dict[Unknown, Unknown] | None:
        ...

    def suggest_name(self): # -> str | Unknown:
        ...

    def connect(self, write=...) -> Connection:
        ...

    async def execute_write(self, sql, params=..., block=...) -> UUID:
        ...

    async def execute_write_fn(self, fn, block=...) -> UUID:
        ...

    async def execute_fn(self, fn):
        ...

    async def execute(self, sql, params=..., truncate=..., custom_time_limit=..., page_size=..., log_sql_errors=...):
        """Executes sql against db_name in a thread"""
        ...

    @property
    def size(self) -> int:
        ...

    async def table_counts(self, limit=...): # -> dict[Unknown, Unknown]:
        ...

    @property
    def mtime_ns(self) -> int | None:
        ...

    async def attached_databases(self) -> list[AttachedDatabase]:
        ...

    async def table_exists(self, table) -> bool:
        ...

    async def table_names(self) -> Sequence[str]:
        ...

    async def table_columns(self, table) -> Sequence[str]:
        ...

    async def table_column_details(self, table):
        ...

    async def primary_keys(self, table):
        ...

    async def fts_table(self, table):
        ...

    async def label_column_for_table(self, table) -> None:
        ...

    async def foreign_keys_for_table(self, table):
        ...

    async def hidden_table_names(self) -> Sequence[str]:
        ...

    async def view_names(self) -> Sequence[str]:
        ...

    async def get_all_foreign_keys(self):
        ...

    async def get_table_definition(self, table, type_=...): # -> str | None:
        ...

    async def get_view_definition(self, view): # -> str | None:
        ...

    def __repr__(self) -> str:
        ...



class WriteTask:
    __slots__ = ...
    def __init__(self, fn, task_id, reply_queue) -> None:
        ...



class QueryInterrupted(Exception):
    ...


class MultipleValues(Exception):
    ...


class Results:

    rows:Sequence[Row] = ...
    truncated:bool = ...
    description:Sequence[Sequence[str]] = ...

    def __init__(self, rows:Sequence[Row], truncated:bool, description:Sequence[Sequence[str]]) -> None:
        ...

    @property
    def columns(self) -> list[str]:
        ...

    def first(self) -> Optional[Row]:
        ...

    def single_value(self):
        ...

    def __iter__(self) -> Iterator[Row]:
        ...

    def __len__(self) -> int:
        ...



