"""
This type stub file was generated by pyright.
"""

hookspec = ...
hookimpl = ...
@hookspec
def startup(datasette): # -> None:
    """Fires directly after Datasette first starts running"""
    ...

@hookspec
def get_metadata(datasette, key, database, table): # -> None:
    """Return metadata to be merged into Datasette's metadata dictionary"""
    ...

@hookspec
def asgi_wrapper(datasette): # -> None:
    """Returns an ASGI middleware callable to wrap our ASGI application with"""
    ...

@hookspec
def prepare_connection(conn, database, datasette): # -> None:
    """Modify SQLite connection in some way e.g. register custom SQL functions"""
    ...

@hookspec
def prepare_jinja2_environment(env): # -> None:
    """Modify Jinja2 template environment e.g. register custom template tags"""
    ...

@hookspec
def extra_css_urls(template, database, table, columns, view_name, request, datasette): # -> None:
    """Extra CSS URLs added by this plugin"""
    ...

@hookspec
def extra_js_urls(template, database, table, columns, view_name, request, datasette): # -> None:
    """Extra JavaScript URLs added by this plugin"""
    ...

@hookspec
def extra_body_script(template, database, table, columns, view_name, request, datasette): # -> None:
    """Extra JavaScript code to be included in <script> at bottom of body"""
    ...

@hookspec
def extra_template_vars(template, database, table, columns, view_name, request, datasette): # -> None:
    """Extra template variables to be made available to the template - can return dict or callable or awaitable"""
    ...

@hookspec
def publish_subcommand(publish): # -> None:
    """Subcommands for 'datasette publish'"""
    ...

@hookspec(firstresult=True)
def render_cell(value, column, table, database, datasette): # -> None:
    """Customize rendering of HTML table cell values"""
    ...

@hookspec
def register_output_renderer(datasette): # -> None:
    """Register a renderer to output data in a different format"""
    ...

@hookspec
def register_facet_classes(): # -> None:
    """Register Facet subclasses"""
    ...

@hookspec
def register_routes(): # -> None:
    """Register URL routes: return a list of (regex, view_function) pairs"""
    ...

@hookspec
def actor_from_request(datasette, request): # -> None:
    """Return an actor dictionary based on the incoming request"""
    ...

@hookspec
def permission_allowed(datasette, actor, action, resource): # -> None:
    """Check if actor is allowed to perfom this action - return True, False or None"""
    ...

@hookspec
def canned_queries(datasette, database, actor): # -> None:
    """Return a dictonary of canned query definitions or an awaitable function that returns them"""
    ...

@hookspec
def register_magic_parameters(datasette): # -> None:
    """Return a list of (name, function) magic parameter functions"""
    ...

@hookspec
def forbidden(datasette, request, message): # -> None:
    """Custom response for a 403 forbidden error"""
    ...

@hookspec
def menu_links(datasette, actor, request): # -> None:
    """Links for the navigation menu"""
    ...

@hookspec
def table_actions(datasette, actor, database, table, request): # -> None:
    """Links for the table actions menu"""
    ...

@hookspec
def database_actions(datasette, actor, database, request): # -> None:
    """Links for the database actions menu"""
    ...

@hookspec
def skip_csrf(datasette, scope): # -> None:
    """Mechanism for skipping CSRF checks for certain requests"""
    ...

