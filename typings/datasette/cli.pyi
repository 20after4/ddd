"""
This type stub file was generated by pyright.
"""

import click
import os
from click.types import CompositeParamType
from click_default_group import DefaultGroup
from .utils import StaticMount
from .version import __version__

class Config(click.ParamType):
    name = ...
    def convert(self, config, param, ctx): # -> tuple[Unknown, bool] | tuple[Unknown, int] | tuple[Unknown, Unknown]:
        ...
    


class Setting(CompositeParamType):
    name = ...
    arity = ...
    def convert(self, config, param, ctx): # -> tuple[Unknown, bool] | tuple[Unknown, int] | tuple[Unknown, Unknown]:
        ...
    


def sqlite_extensions(fn):
    ...

@click.group(cls=DefaultGroup, default="serve", default_if_no_args=True)
@click.version_option(version=__version__)
def cli(): # -> None:
    """
    Datasette!
    """
    ...

@cli.command()
@click.argument("files", type=click.Path(exists=True), nargs=-1)
@click.option("--inspect-file", default="-")
@sqlite_extensions
def inspect(files, inspect_file, sqlite_extensions): # -> None:
    ...

async def inspect_(files, sqlite_extensions): # -> dict[Unknown, Unknown]:
    ...

@cli.group()
def publish(): # -> None:
    """Publish specified SQLite database files to the internet along with a Datasette-powered interface and API"""
    ...

@cli.command()
@click.option("--all", help="Include built-in default plugins", is_flag=True)
@click.option("--plugins-dir", type=click.Path(exists=True, file_okay=False, dir_okay=True), help="Path to directory containing custom plugins")
def plugins(all, plugins_dir): # -> None:
    """List currently available plugins"""
    ...

@cli.command()
@click.argument("files", type=click.Path(exists=True), nargs=-1, required=True)
@click.option("-t", "--tag", help="Name for the resulting Docker container, can optionally use name:tag format")
@click.option("-m", "--metadata", type=click.File(mode="r"), help="Path to JSON/YAML file containing metadata to publish")
@click.option("--extra-options", help="Extra options to pass to datasette serve")
@click.option("--branch", help="Install datasette from a GitHub branch e.g. main")
@click.option("--template-dir", type=click.Path(exists=True, file_okay=False, dir_okay=True), help="Path to directory containing custom templates")
@click.option("--plugins-dir", type=click.Path(exists=True, file_okay=False, dir_okay=True), help="Path to directory containing custom plugins")
@click.option("--static", type=StaticMount(), help="Serve static files from this directory at /MOUNT/...", multiple=True)
@click.option("--install", help="Additional packages (e.g. plugins) to install", multiple=True)
@click.option("--spatialite", is_flag=True, help="Enable SpatialLite extension")
@click.option("--version-note", help="Additional note to show on /-/versions")
@click.option("--secret", help="Secret used for signing secure values, such as signed cookies", envvar="DATASETTE_PUBLISH_SECRET", default=lambda : os.urandom(32).hex())
@click.option("-p", "--port", default=8001, type=click.IntRange(1, 65535), help="Port to run the server on, defaults to 8001")
@click.option("--title", help="Title for metadata")
@click.option("--license", help="License label for metadata")
@click.option("--license_url", help="License URL for metadata")
@click.option("--source", help="Source label for metadata")
@click.option("--source_url", help="Source URL for metadata")
@click.option("--about", help="About label for metadata")
@click.option("--about_url", help="About URL for metadata")
def package(files, tag, metadata, extra_options, branch, template_dir, plugins_dir, static, install, spatialite, version_note, secret, port, **extra_metadata): # -> None:
    """Package specified SQLite files into a new datasette Docker container"""
    ...

@cli.command()
@click.argument("packages", nargs=-1, required=True)
@click.option("-U", "--upgrade", is_flag=True, help="Upgrade packages to latest version")
def install(packages, upgrade): # -> None:
    """Install Python packages - e.g. Datasette plugins - into the same environment as Datasette"""
    ...

@cli.command()
@click.argument("packages", nargs=-1, required=True)
@click.option("-y", "--yes", is_flag=True, help="Don't ask for confirmation")
def uninstall(packages, yes): # -> None:
    """Uninstall Python packages (e.g. plugins) from the Datasette environment"""
    ...

@cli.command()
@click.argument("files", type=click.Path(), nargs=-1)
@click.option("-i", "--immutable", type=click.Path(exists=True), help="Database files to open in immutable mode", multiple=True)
@click.option("-h", "--host", default="127.0.0.1", help="Host for server. Defaults to 127.0.0.1 which means only connections " "from the local machine will be allowed. Use 0.0.0.0 to listen to " "all IPs and allow access from other machines.")
@click.option("-p", "--port", default=8001, type=click.IntRange(0, 65535), help="Port for server, defaults to 8001. Use -p 0 to automatically assign an available port.")
@click.option("--uds", help="Bind to a Unix domain socket")
@click.option("--reload", is_flag=True, help="Automatically reload if code or metadata change detected - useful for development")
@click.option("--cors", is_flag=True, help="Enable CORS by serving Access-Control-Allow-Origin: *")
@sqlite_extensions
@click.option("--inspect-file", help='Path to JSON file created using "datasette inspect"')
@click.option("-m", "--metadata", type=click.File(mode="r"), help="Path to JSON/YAML file containing license/source metadata")
@click.option("--template-dir", type=click.Path(exists=True, file_okay=False, dir_okay=True), help="Path to directory containing custom templates")
@click.option("--plugins-dir", type=click.Path(exists=True, file_okay=False, dir_okay=True), help="Path to directory containing custom plugins")
@click.option("--static", type=StaticMount(), help="Serve static files from this directory at /MOUNT/...", multiple=True)
@click.option("--memory", is_flag=True, help="Make /_memory database available")
@click.option("--config", type=Config(), help="Deprecated: set config option using configname:value. Use --setting instead.", multiple=True)
@click.option("--setting", "settings", type=Setting(), help="Setting, see docs.datasette.io/en/stable/config.html", multiple=True)
@click.option("--secret", help="Secret used for signing secure values, such as signed cookies", envvar="DATASETTE_SECRET")
@click.option("--root", help="Output URL that sets a cookie authenticating the root user", is_flag=True)
@click.option("--get", help="Run an HTTP GET request against this path, print results and exit")
@click.option("--version-note", help="Additional note to show on /-/versions")
@click.option("--help-config", is_flag=True, help="Show available config options")
@click.option("--pdb", is_flag=True, help="Launch debugger on any errors")
@click.option("-o", "--open", "open_browser", is_flag=True, help="Open Datasette in your web browser")
@click.option("--create", is_flag=True, help="Create database files if they do not exist")
@click.option("--crossdb", is_flag=True, help="Enable cross-database joins using the /_memory database")
@click.option("--ssl-keyfile", help="SSL key file")
@click.option("--ssl-certfile", help="SSL certificate file")
def serve(files, immutable, host, port, uds, reload, cors, sqlite_extensions, inspect_file, metadata, template_dir, plugins_dir, static, memory, config, settings, secret, root, get, version_note, help_config, pdb, open_browser, create, crossdb, ssl_keyfile, ssl_certfile, return_instance=...): # -> Datasette | None:
    """Serve up specified SQLite database files with a web UI"""
    ...

async def check_databases(ds): # -> None:
    ...

