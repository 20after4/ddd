title: Data³
about: Data³
about_url: https://www.mediawiki.org/wiki/Data%C2%B3
description_html: |-
  Try out the   <a href="-/ddd/dashboard/project-metrics">Phabricator Metrics</a> dashboard!
plugins:
  datasette-dashboards:
    project-metrics:
      title: Project Metrics
      description: ""
      tabs:
        charts: Charts
        cycle: Report
      placeholder_text:
        To get started, please enter a project name or task ID at the top of the page.
      filters:
        project:
          name: Project
          type: custom
          template: filter_projects.html
          query: |-
            [[ select * from Project where phid=:project ]]
        task_id:
          name: Task
          type: text
        column:
          name: column
          type: text
        date:
          name: Date range
          type: daterange
          default: ["start_of_quarter", "now"]
      charts:
        task-details:
          title: Task details
          db: metrics
          tab: charts
          requires: task_id
          query: task_details
          library: jinja
          template: task_details.html
        task-projects:
          title: Task projects
          db: metrics
          tab: charts
          requires: task_id
          query: task_projects
          library: jinja
          template: task_projects.html
        task-users:
          title: Task users
          db: metrics
          tab: charts
          requires: task_id
          query: task_users
          library: jinja
          template: task_users.html
        task-days-in-project:
          title: Days in project
          db: metrics
          query: task_days_in_project
          library: jinja
          template: task_days_in_project.html
          requires: [ task_id, project ]
          tab: charts
        task-days-in-columns:
          title: Days in project columns
          db: metrics
          tab: charts
          requires: [ task_id, project ]
          query: select *, next_ts - ts as duration, printf('%.0f', ((next_ts - ts) / 86400.0)) AS duration_days from (select events.*, columns.column_name, columns.project_name, columns.is_default, ifnull(LEAD(ts) OVER(ORDER BY ts), strftime('%s','now', 'localtime')) next_ts from events join columns on new = column_phid where new like '%PHID-PCOL-%' and task = :task_id and event = 'columns' and project_phid = :project order by ts);
          library: vega
          display:
            mark: { type: bar, tooltip: true }
            encoding:
              x: { field: duration_days, type: quantitative, title: 'Days in column' }
              y: { field: column_name, type: nominal, title: 'Column'  }


databases:
  metrics:
    tables:
      conduit_cursor:
        description_html: |-
          Each row in the cursors table is used to keep track of the last ID encountered when paging through conduit API responses.
          When fetching the next page of results, we pass this ID as the 'after' argument to tell phabricator where the next page will begin.
          Pagination enables us to transfer large amounts of data without overloading the server or exceeding request time limits.
      phobjects:
        label_column: "name"
        description_html: |-
          The name, url and basic metadata of every known phabricator object. Used mostly to look up the names of users, projects and columns efficiently. Especially convenient because you can join on the phid field even when you have multiple different PHID types to resolve.
      Project:
        label_column: "name"
        description_html: |-
          Bulk phabricator project data.
      ProjectColumn:
        label_column: "name"
      Task:
        label_column: "name"
        description_html: |-
          The bulk phabricator task metadata as extracted from th maniphest.search api
      Columns:
        description_html: |-
          Every column from every workboard, including archived projects and hidden columns.
      column_metrics:
        description_html: |-
          This table organizes phabricator task data by the projects and workboard columns.
          This is sometimes more useful when building a project-centric or milestone-centric
          view of phabricator activity.
        columns:
          ts: unix epoch timestamp when the activity occurred.
          project: This is either a project PHID, or one of 'global', empty for the events which do not belong to a project context.
          column: either a column PHID or empty when the event is unrelated to a column or workboard.
          task: the task id
          type: the type of activity, for example, 'assign', 'mention-this', 'status'
          value: eitehr +1 or -1, representing whether the given status was added or removed from the task

      task_metrics:
        description_html: |-
          This table represents every state change that was
          recorded on each phabricator task in the index. The data is organized by
          "metric" and "state" where metric is the category and state is the value.
          There are begining and ending timestamps, as well as a duration for each state.
        units:
          duration: day
        columns:
          task: Phabricator task that this metric applies to.
          metric: The type or category of the state transition represented.
          state: The specific value of the metric during this time period.
          ts: The unix epoch timestamp when this state begins.
          ts2: The unix epoch timestamp when this state ends.
          duration: The number of days elapsed between ts and ts2.
    queries:
      column_events:
        title: Column movement events.
        sql: |-
          select c.project_name, c.column_name as new_column, d.column_name as old_column, count(distinct task) as count, date(ts, 'unixepoch', 'start of month') as month, datetime(ts, 'unixepoch') as timestamp, task, project, user, event, old, new from events e join columns c on e.new = c.column_phid join columns d on e.old=d.column_phid where event = 'columns' group by old, new, month order by count desc limit 50
      project_tree:
        title: Open Projects
        sql: |-
          WITH RECURSIVE pp(phid, name, path, root) AS
          (
              SELECT
                phid,name,name AS path, phid as root
              FROM
                Project
              WHERE
                parent is null and status='open'
              UNION ALL
              SELECT
                Project.phid,
                Project.name AS name,
                pp.path||':'||Project.name as path,
                pp.root as root
              FROM Project
              JOIN pp ON Project.parent = pp.phid and status='open'
          )
          SELECT
              pp.path AS path,
              pp.root as root,
              Project.fullName AS label,
              Project.name as name,
              Project.phid AS key,
              Project.phid as phid,
              Project.parent as parent,
              Project.uri AS href,
              Project.depth AS depth,
              Project.slug as slug
            FROM
              Project
            JOIN
              pp
            ON
              Project.phid=pp.phid and status='open'
            ORDER BY
                path;
      proxy_phids:
        SELECT proxy_phid from ProjectColumn where project=:project
      project_events:
        title: project events
        sql: |-
            SELECT
            date(ts, 'unixepoch', 'start of month') as month,
            count(distinct task) as tasks,
            count(distinct user) as people,
            count(old) as sources,
            old as source,
            new as column
            FROM events
            WHERE event in ('columns', 'projects')
            AND project=:project
            GROUP BY month,column,source ORDER BY month
      columns_rollup:
        title: aggregations by column and month
        sql: |-
          SELECT
          date(ts, 'unixepoch', 'start of month') as month,
          count(distinct user) as people,
          count(distinct old) as source_count,
          count(*) as rows,
          group_concat(task, ', ') as tasks,
          group_concat(user, ', ') as users,
          group_concat(old, ', ') as sources,
          group_concat(new, ', ') as destinations,
          group_concat(datetime(ts, 'unixepoch'), ', ') as times
          FROM events
          WHERE event IN ('columns', 'projects')
          AND :project IN (project, old, new)
          GROUP BY month
          order by ts
      columns_startofwork:
        select
          task,
          metric,
          state,
          date(ts, 'unixepoch') as created,
          date(ts2, 'unixepoch') as started,
          round(duration /(24 * 60 * 60)) as waiting_days,
          c.phid as column_phid,
          c.name as column_name,
          c.project as project_phid
        from
          task_metrics m
          join ProjectColumn c on c.phid = m.state
        where
          "metric" = 'startofwork'
          AND c.project = :project
      mentions:
        title: "@Mentions in comments"
        params: [ Phabricator_User ]
        sql: |-
          /* Find who mentioned a user */
          WITH events_subquery AS (
            SELECT
              DISTINCT ev.task,
              ev.user,
              ev.new AS mention,
              datetime(ev.ts, 'unixepoch') as ts
            FROM
              events ev
            WHERE
              ev.event = '@mention'
              AND ev.new = :_phid_test
              order by ts desc
          )
          SELECT
            events_subquery.task,
            events_subquery.ts,
            o.name AS mentioner
          FROM
            events_subquery
            JOIN phobjects o ON events_subquery.user = o.phid
      task_details:
        title: basic task details
        sql: |-
          SELECT
          UPPER(SUBSTR(task.name, 1, 1)) || SUBSTR(task.name, 2) as name,
          json_extract(data, '$.uri') AS uri,
          json_extract(task.status, '$.name') AS status
          FROM task
          JOIN phobjects ON phobjects.phid = task.phid
          WHERE id = :task_id
      task_projects:
        title: projects task has been tagged on
        sql: |-
          SELECT DISTINCT
          json_extract(data, '$.uri') AS uri,
          phid,
          name
          FROM task_metrics
          JOIN phobjects ON phobjects.phid = metric
          WHERE metric LIKE '%PHID-PROJ-%' AND task = CAST(:task_id AS decimal)
      task_users:
        title: users of a task
        sql: |-
          SELECT
          authorPhobjects.name AS author_name,
          json_extract(authorPhobjects.data, '$.uri') AS author_uri,
          ownerPhobjects.name AS owner_name,
          json_extract(ownerPhobjects.data, '$.uri') AS owner_uri,
          closerPhobjects.name AS closer_name,
          json_extract(closerPhobjects.data, '$.uri') AS closer_uri
          FROM Task
          LEFT OUTER JOIN phobjects authorPhobjects ON authorPHID = authorPhobjects.phid
          LEFT OUTER JOIN phobjects ownerPhobjects ON ownerPHID = ownerPhobjects.phid
          LEFT OUTER JOIN phobjects closerPhobjects ON closerPHID = closerPhobjects.phid
          WHERE id = :task_id
      task_days_in_project:
        title: days in project
        sql: |-
          SELECT
          *,
          task,
          uri as project_uri,
          json_extract(data, '$.uri') AS task_uri,
          printf('%.0f', (sum(duration) / 86400.0)) as days,
          Project.name as project_name
          FROM task_metrics
          JOIN Project ON metric = project.phid
          JOIN phobjects ON phobjects.name = 'T' || task_metrics.task
          WHERE state = 'tagged' AND project.phid = :project AND task = CAST(:task_id AS decimal)
      task-assignments:
        title: Task Assignments
        sql: SELECT DISTINCT
            user,
            count(task) as task_count,
            old, new,
            user=new as claim,
            (old is not null and new is not null) as reassign,
            new is null as unassign
          FROM events
          WHERE
            event='assign'
          GROUP BY
            task, old, new
          ORDER BY
            task_count desc
      task_any_assignee:
        title: All tasks assigned to user in any capacity
        sql: |-
          select
            u.name as user,
            'T' || t.id as task,
            t.name as title,
            t.status,
            t.dateModified,
            t.points,
            t.subtype,
            t.dateClosed
          from
            Task t
            join phobjects u on u.phid in (ownerPHID, [custom.train.backup])
          where
            u.name like :user

extra_css_urls:
  - /static/styles.css
